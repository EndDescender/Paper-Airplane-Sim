/**
 * This file was automatically generated by the ICG based on the file:
 * /home/bahram/trick_sims/SIM_paper_airplane/models/airplane/include/Airplane.hh
 * This file contains database parameter declarations specific to the
 * data structures and enumerated types declared in the above file.
 * These database parameters are used by the Trick input and
 * data recording processors to gain access to important simulation
 * variable information.
 */

#define TRICK_IN_IOSRC
#include <stdlib.h>
#include "trick/MemoryManager.hh"
#include "trick/attributes.h"
#include "trick/parameter_types.h"
#include "trick/ClassSizeCheck.hh"
#include "trick/UnitsMap.hh"
#include "trick/checkpoint_stl.hh"
#include "/home/bahram/trick_sims/SIM_paper_airplane/models/airplane/include/Airplane.hh"

extern "C" {

ATTRIBUTES attrAirplane[] = {
{"vel0", "double", "m", "", "",
  "Init velocity of plane",
  10,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  0, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"pos0", "double", "m", "", "",
  "Init position of plane",
  10,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  16, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_speed", "double", "m/s", "", "",
  "Init plane speed",
  10,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  32, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"angle", "double", "rad", "", "",
  "Angle of plane",
  10,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  40, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"angleDeg", "double", "degree", "", "",
  "Angle of plane in degrees",
  10,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  48, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"acc", "double", "m/s2", "", "",
  "xy-acceleration",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  56, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"vel", "double", "m/s", "", "",
  "xy-velocity",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  72, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"pos", "double", "m", "", "",
  "xy-position",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  88, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"impact", "bool", "1", "", "",
  "Has impact occured?",
  15,TRICK_BOOLEAN, sizeof(bool), 0, 0, Language_CPP, 4,
  104, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"impactTime", "double", "s", "", "",
  "Time of Impact",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  112, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"mass", "double", "kg", "", "",
  "",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  120, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"Cd", "double", "1", "", "",
  "Coefficient of Drag",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  128, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"Cl", "double", "1", "", "",
  "Coefficient of Lift",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  136, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"surfaceArea", "double", "m^2", "", "",
  "",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  144, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"crossArea", "double", "m^2", "", "",
  "",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  152, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"airDensity", "double", "1", "", "",
  "Constant air density at sea level",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  160, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"


void init_attrAirplane() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

}

extern "C" {

void init_attrAirplane_c_intf() {
    init_attrAirplane() ;
}

size_t io_src_sizeof_Airplane() {
    return sizeof(Airplane) ;
}

void* io_src_allocate_Airplane(int num) {
    Airplane* temp = (Airplane*)calloc(num, sizeof(Airplane));
    return (void*)temp;
}

void io_src_destruct_Airplane(void* address __attribute__((unused)), int num __attribute__((unused))) {
}

void io_src_delete_Airplane(void* address __attribute__((unused))) {}

} //extern "C"

struct UnitsMapAirplane {
    UnitsMapAirplane() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("Airplane_vel0", "m") ;
        units_map_ptr->add_param("Airplane_pos0", "m") ;
        units_map_ptr->add_param("Airplane_init_speed", "m/s") ;
        units_map_ptr->add_param("Airplane_angle", "rad") ;
        units_map_ptr->add_param("Airplane_angleDeg", "degree") ;
        units_map_ptr->add_param("Airplane_acc", "m/s2") ;
        units_map_ptr->add_param("Airplane_vel", "m/s") ;
        units_map_ptr->add_param("Airplane_pos", "m") ;
        units_map_ptr->add_param("Airplane_impact", "1") ;
        units_map_ptr->add_param("Airplane_impactTime", "s") ;
        units_map_ptr->add_param("Airplane_mass", "kg") ;
        units_map_ptr->add_param("Airplane_Cd", "1") ;
        units_map_ptr->add_param("Airplane_Cl", "1") ;
        units_map_ptr->add_param("Airplane_surfaceArea", "m^2") ;
        units_map_ptr->add_param("Airplane_crossArea", "m^2") ;
        units_map_ptr->add_param("Airplane_airDensity", "1") ;
    }
} umAirplane;

